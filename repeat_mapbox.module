<?php

/**
 * @file
 * Provides map related functionality.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\Crypt;
use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\search_api\Query\QueryInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Implements hook_preprocess_HOOK().
 */
function repeat_mapbox_preprocess_paragraph(array &$vars): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $vars['paragraph'];
  if ($paragraph->getType() === 'mapbox_map') {
    $config = Drupal::config('repeat_mapbox.settings')->get();
    if (isset($config['token'])) {
      $vars['#attached']['drupalSettings']['repeatMapbox']['settings'] = $config;
      $vars['#attached']['library'][] = 'repeat_mapbox/mapbox';
      $vars['content']['map'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => Html::getId('map'),
          'class' => ['mapbox_map', 'repeat_mapbox'],
        ],
      ];
    }
    else {
      Drupal::logger('Mapbox')->error('Mapbox access token not set.', [
        'link' => Link::createFromRoute('Configure Mapbox', 'repeat_mapbox.mapbox_settings')
          ->toString(TRUE)
          ->getGeneratedLink(),
      ]);
      $vars['content'] = [
        '#markup' => t('Map unavailable'),
      ];
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function repeat_mapbox_preprocess_views_view(array &$vars): void {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $vars['view'];
  if ($view->id() === 'facetted_projects_view') {
    $geo_json = _repeat_mapbox_mapping_get_geojson($view);
    $vars['#attached']['drupalSettings']['ftm_mapbox']['geojson'] = json_decode($geo_json, TRUE);
    $vars['#attached']['drupalSettings']['ftm_mapbox']['hash'] = Crypt::hashBase64($geo_json);
  }
}

/**
 * Get GEO JSON mapping points.
 *
 * @return string
 *   JSON array for settings.
 */
function _repeat_mapbox_mapping_get_geojson(ViewExecutable $view): string {
  $json_view = Views::getView('geojson_export');
  $json_view->setDisplay('geojson_export_1');

  $args = $view->args;
  $exposed_input = $view->getExposedInput();
  if (!empty($exposed_input['search_api_fulltext'])) {
    $args['search_api_fulltext'] = $exposed_input['search_api_fulltext'];
  }
  $json_view->setArguments($args);

  $rendered_view = $json_view->render();
  return $rendered_view['#markup']->__toString();
}

/**
 * Implements hook_geo_json_view().
 */
function repeat_mapbox_geojson_view_alter(array &$features, ViewExecutable $view): void {
  $new = [
    'type' => 'FeatureCollection',
    'features' => [],
  ];
  foreach ($features['features'] as $feature) {
    if ($feature['geometry']['type'] === 'Point') {
      $new['features'][] = $feature;
    }
    elseif ($feature['geometry']['type'] === 'MultiPoint') {
      foreach ($feature['geometry']['coordinates'] as $point) {
        $feat = $feature;
        $feat['geometry']['type'] = 'Point';
        $feat['geometry']['coordinates'] = $point;
        $new['features'][] = $feat;
      }
    }
    else {
      $new['features'][] = $feature;
    }
  }
  $features = $new;
}

/**
 * Implements hook_search_api_query_alter().
 */
function repeat_mapbox_search_api_query_alter(QueryInterface &$query): void {
  $facet_manager = \Drupal::service('facets.manager');
  $search_id = $query->getSearchId();

  // If map view, then alter the query to include the facets from the list view.
  $id = 'views_geojson_export:geojson_export__geojson_export_1';
  if (strpos($search_id, $id) === 0) {
    $search_id = 'search_api:views_block__facetted_projects_view__block_1';
    $facet_manager->alterQuery($query, $search_id);
  }
}
